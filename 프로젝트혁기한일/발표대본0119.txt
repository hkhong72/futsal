====== 트로피 ======

안녕하세요 1조의 이재현, 홍혁기, 발표를 맡게된 이윤후 입니다.

저희 조는 "AWS & Docker를 활용한 풋살 구장 매칭 서비스" 를 개발하였습니다.

(인사하고 다 들어가고)

기존의 매칭 서비스라 하면 데이트 어플을 대표적인 예로 들 수 있습 니다.

입력받은 사용자의 정보를 토대로 추천을 해주는 부분이 있지만 

저희 서비스는 사용자가 직접 원하는 날짜, 시간, 구장을 선택해야 하기 때문에 추천을 해주는 부분이 없습니다.

그럼에도 불구하고 일반적으로 실제 스포츠분야의 사용자들은 대결하는 과정을 매칭이라 표현 한다고 조사를 했고, 

따라서 앞으로 설명하는 매칭은 대결을 의미한다고 보시면 됩니다.

데이트어플의 매칭은 사람 사이의 연결의 의미가 있지만

전 풋살선수 홍혁기 조원의 말을 빌려 풋살경기의 매칭은 대결을 뜻합니다.

시스템적인 설명을 뒤에서 자세히 하겠습니다.




====== 골대 & 축구공 ======

저희가 준비한 목록입니다. 

서비스 사용 방법, 흐름도, 시연 영상으로 소개 이후

시스템 구성에 대해서 설명하도록 하겠습니다.







====== 프로젝트 개요 ======

프로젝트 개요 입니다.

실제 기존 서비스의 진행 과정 및 그 과정에서 도출한 불편한 점에 대해 설명드리겠습니다.

(줌인) 먼저 구장예약이 가능한 서울시 공공서비스 예약과 같은 사이트에서 구장을 예약합니다. 

보시는대로 원하는 날짜와 시간, 구장을 선택하여 구장을 예약할 수 는 있지만, 따로 상대팀을 구하거나 하는 기능은 없는 것을 볼 수 있습니다.

(줌아웃) 따라서 매칭 시스템이 부재한 것을 알 수 있습니다.

구장을 예약했다면 이후에는 네이버 밴드와 같은 커뮤니티 사이트에서 글을 따로 작성하여 매칭 상대팀을 따로 구하는 과정을 거치게 됩니다.

(줌인) 하지만, 팀의 정보를 개개인이 주관적으로 올리기에 특히 민감한 부분인 실력적인 요소를 판별할 수 없음을 확인할 수 있습니다.

(줌아웃) 현실적으로 글 작성한 팀이 실제로 구장을 대여했는지 아닌지에 대한 여부 또한 시스템화 되어있지 않아, 많은 사기 행각도 일어나고 있습니다.

(줌인)마지막으로 게시글을 작성했다면, 혹은 원하는 게시글을 발견했다면, 해당 팀과 직접 문자메세지를 통해 필요한 나머지 정보들을 주고받고, 이용료를 직접 주고받는 과정으로 이어집니다.

(줌아웃) 이를 통해 저희는 개선할 불편한 점들을 크게 3가지 매칭시스템부재, 신뢰할 수 없는 정보, 정산 시스템의 부재로 정리하였습니다.

/* 타 커뮤니티 사이트에서 글을 작성하여 

매칭할 팀을 구하는 과정이 있었습니다.

해당 과정에서 저희 조가 파악한 불편함은 총 3가지 입니다.

매칭 시스템 부재로 예약 사이트가 아닌 타사이트에서 매칭 상대를 구해야 하는 점

매칭 이후에 구장 이용료 정산에 논의해야 하는 점

상대팀에게 직접 팀의 정보를 물어봐야 하는 점이 있습니다. */





====== 서비스 사용 방법 ======

저희는 이러한 불편함을 개선하기 위해 프로젝트를 진행하였고, 실제 저희 사이트를 보여드리며 개선된 기능과 새롭게 만든 매칭시스템 이 진행되는 과정을 설명드리겠습니다.

(줌인) 먼저 메인페이지에 접속하게 되면 위치정보를 기반으로 근처 구장들을 볼 수 있고, 지도 메뉴 혹은 구장 검색을 통해 예약을 원하는 구장을 선택할 수 있습니다.

보이시는 빨간부분인 두블리 스포츠센터 구장을 예약하기 위해 들어가보도록 하겠습니다.

(Next줌인) 먼저 구장페이지에 들어오면 왼쪽하단 달력을 통해 원하는 날짜를 선택하실 수 있고, 오른쪽하단에 시간테이블을 이용하여 원하는 시간까지 설정하실 수 있습니다.

시간테이블은 빨강, 노랑, 초록의 색상으로 해당시간의 예약이 가능한지, 아닌지 매칭대기중인지의 예약상태정보를 제공합니다.

날짜와 시간을 선택했다면 예약하기 버튼을 통해 예약결제 페이지로 이동하게됩니다.

(Next줌인) 결제페이지에서는 이용동의를 받고, 해당 예약에 대한 정보와 우측하단의 부분대여 및 일괄대여 선택버튼을 통해 

매칭상대방을 받을지 결정할 수 있습니다. 일괄대여를 선택한다면 상대방없이 매칭을 진행하게 되고, 화면처럼 부분대여를 선택하게된다면 

여러 상대팀들의 매칭신청을 기다릴 수 있습니다. 

(줌아웃) 이제 다른 클라이언트인 상대팀입장에서의 매칭신청 진행과정을 보여드리겠습니다. 참고로 매칭신청은 여러팀이 할 수 있습니다.

(줌인) 마찬가지로 상대팀또한 원하는 구장을 선택하여 구장페이지로 입장합니다.

(Next줌인) 구장페이지에서 시간테이블이 먼저 우리팀이 선택한 날짜와 시간의 해당하는 부분이 노란색으로 바뀌어 있음을 확인할 수 있습니다.

노란색버튼을 클릭하게 되면 해당하는 시간의 먼저 예약한 홈팀의 정보가 보여지게 되며 이를 보고, 이팀과 매칭을 진행하고 싶은지 판단할 수 있습니다.

(Next줌인) 예약을 진행하려고 들어가면 예약내역이 약간 달라진 것을 확인할 수 있습니다. 매칭정보를 확인하고 예약신청을 하게되면 

(줌아웃) 이제 홈팀인 우리팀이 매칭을 수락하는 과정이 남게 되는데요.

(줌인) 어웨이팀인 상대팀1, 2, 3이 각각 예약신청을 할 때마다 홈팀인 우리팀에게 실시간으로 알림이 전송되게 됩니다. 보시는 것처럼 알림을 확인하시고 

(Next줌인) 예약 목록으로 들어가시면 어웨이팀 리스트 버튼이 활성화됩니다. 이 버튼을 통해 어웨이팀들의 신청현황을 볼 수 있고, 

정보를 확인하고 매칭을 진행하고싶은 상대팀을 선택하여 매칭진행을 확정하실 수 있습니다.

(줌아웃) 홈팀이 매칭을 이렇게 수락하고 나면 매칭이 완료되는데요. 매칭완료시에 

(줌인) 양팀모두가 보이시는 것처럼 매칭이 확정되었다는 알림수신을 확인하실 수 있습니다. 

(줌아웃) 이렇게 한팀이 구장을 부분대여로 예약하고 다른 여러팀들이 매칭을 신청하게 되며, 이후에 매칭을 수락하는 과정을 통해 매칭완료가 됩니다. 


*/ 매칭 시스템과 커뮤니티의 조화를 위한 퀵메뉴 바

상대팀에 대한 구체적인 정보 제공

상대 확정 시 이용료 정산 자동화

위치 정보제공에 따른 가까운 구장 정보 제공

매칭 관련 알림 전송을 하도록 설계하였습니다.  */






====== 데이터 흐름도 ======

다음은 매칭이 진행되는 동안 데이터가 어떠한 과정을 통해 흘러가는지에 대한 설명을 드리겠습니다.

앞서 보셨던 것과 마찬가지로, (첫팀예약애니메이션) 하나의팀이 웹/앱에서 구장예약을하게 되면 프론트엔드를 거쳐서 스프링부트 컨테이너를 지나

입력된 날짜와 시간, 구장정보가 몽고디비 컨테이너에 들어가게 됩니다. 그 때는 해당 구장은 절반이 예약된 상태이고요.

(두번째팀예약애니메이션) 그 후 또다른팀이 같은 과정을 거쳐 구장에 매칭신청을 하게 되면 매칭신청리스트에 들어가게 됩니다. 

(두번째팀 알람전송) 그 때 첫번째 구장을예약했던 팀에게 몽고디비에서 뽑아서 웹은 웹소켓을 통해, 모바일은 파이어베이스를 통해 홈팀의 예약자클라이언트에게 

알림을 전송합니다. (세번째팀예약애니메이션) 마찬가지로 또 다른팀이 해당 구장에 매칭신청을 하게 되면 같은 흐름으로 진행이 되구요

(세번째팀알림전송) 매칭신청이 진행되었다는 알림또한 첫번째팀에게 전송됩니다.

(첫번째팀수락애니메이션) 이제 첫번째팀이 매칭신청리스트에 있는 팀들중 원하는 팀을 골라 매칭수락을 진행하되면 그 정보가 몽고디비컨테이너에 들어가서

해당 구장 매칭이 완료되고 수락받지 못한 매칭신청팀은 리스트에서 사라지게 됩니다. 

(매칭확정알림전송) 이렇게 매칭이 확정되면 매칭을 진행할 두팀 모두에게 같은 방식으로 알림이 전송되게 됩니다.


/* 다음은 새롭게 만든 매칭 시스템 입니다.

이용자가 구장을 예약할 때 구장을 전부 예약 할 지, 부분으로 예약할 지 선택지를 제공합니다.

부분 대여로 예약 시, 다른 팀이 예약한 구장에 도전 신청을 할수 있으며, 이를 진행하게 되면 해당 팀에 대한 정보가 알림으로 우리 팀에 전송되고

또한, 우리팀이 매칭을 수락하게 되면 양 팀에게 매칭이 확정되었다는 알림이 전송되도록 하였습니다. */


====== 시연영상 ======

다음 으로 웹 사이트와 모바일 앱을 이용한 매칭이 진행되는 과정의 시연영상을 보시겠습니다.

====== 사용 기술1 ======

저희 프로젝트에 사용된 기술입니다.

웹의 경우, 

프론트엔드는 Springboot와 Thymeleaf template engine을 사용하였으며 

백엔드도 마찬가지로 Springboot를 사용하였습니다.

모바일의 경우,

Retrofit2 라이브러리를 활용하여 Springboot를 REST API로 사용하였습니다. 



====== 사용 기술2 ======

Swagger UI와 Postman을 사용해 프로젝트에 사용된 REST API 를 정리하였고, 

Jenkins를 활용하여 CI/CD 파이프라인을 구축하였습니다.



====== 시스템 구성 ======

다음은 저희 프로젝트의 시스템 구성에 관한 설명입니다.




====== 기능 (DB) ======

저희는 Python 의 Selenium, beautifulSoup  라이브러리를 활용하여 크롤링 한 데이터를 

pandas로 가공해 약 1600개의 구장 데이터를 구축하였습니다. 

그리고 스프링부트의 RestTemplate을 사용하여 OpenWeatherAPI에 날씨데이터를 가져오고

Schedular annotation을 이용해 이를 주기적으로 갱신하도록 하였습니다.




====== 기능 (알림) ======

다음은 알림 기능에 관한 설명입니다.

우선 모바일의 경우, 구글의 FireBase Cloud Messaging을 사용하여 

앱에서 로그인 시 회원 DB에 FireBase token을 저장하고, 서버 내에 알림을 보내야하는 이벤트가 발생 시

해당 토큰에 알림을 보냄으로써 앱 화면 상단에 알림이 노출될 수 있도록 하였습니다.

하지만 위의 방법으로 앱이 백그라운드 상태일 경우에만 알림이 울리기때문에, 

앱이 포그라운드 상태일 경우에도 알림을 주기위해 앱 내의 broadcast receiver가 요청을 받았을 때 

사용자가 현재 앱을 사용중인지 판별하여 local notification을 구성하도록 하였습니다.


웹의 경우, Spring에서 지원하는 구독/발행 방식의 stomp프로토콜을 사용하여 

사용자가 로그인하는 순간부터 알림을 받아야 하는 이벤트를 구독하고 있도록 하였습니다. 

사용자가 누구인지 알 수 있게 하기위해 httpInterceptor를 구현하여 웹소켓 세션에서 http세션에 접근할 수 있도록 하였고, 

모바일에서도 웹으로 알림을 보낼 수 있게끔 기존의 send to 어노테이션을 사용하는 것에서 

spring에 simplemessagetemplate으로 메세지 전송 방법을 변경하여 구현하였습니다.




====== 기능 (HTTPS) ======

저희 서비스는 회원의 위치 정보 제공 동의를 받아, 가까운 구장들을 보여주고 있습니다.

모바일의 경우, 위치권한 사용을 동의 받은 후에 내장된 GPS를 통해 사용자의 현 위치를 가져오도록 하였으나

웹의 경우, google의 Geolocation API 의 사용조건이 HTTPS와 같은 secure context 였기에 변환 작업이 필요했습니다.

그래서 spring boot의 컨테이너를 80포트로 변환

route 53을 사용한 dns 설정

Certificate Manager 를 활용한 SSL 인증

load balancer 를 사용하여 443 포트 변환 과정을 통해 HTTPS 프로토콜로 변환하여 구현하였습니다.




====== 기능 (CI/CD) ======

이윤후가 주말에 만들 예정임




======= 서비스 & 후기 =======

(줌인) 앞서 보신바와 같이 해당 프로젝트는 웹과 앱으로 개발되었으며 웹사이트의 경우 도메인을 직접 구매하고 AWS를 활용하여 배포하였고

오른쪽에 보이는 모바일 앱은 구글 플레이스토어에 출시하였습니다. (줌아웃)

(줌인) 그리고 실제 배포를 한뒤 풋살종사자분들과 일반인을 대상으로 약 30여개의 피드백을 받았습니다.

예약 전 상대팀의 정보를 확인 할 수 있어 좋다는 평이 다수 있었으며

다른 스포츠에도 적용되었음을 희망하는 분도 있었습니다.

보완점으로 매칭을 기다리는 구장목록과 지역별로 구별이 필요하다라는 후기를 받았습니다.


======= 팀 역할  =======

팀 역할입니다

조원 이윤후는 백엔드 안드로이드 AWS 데이터베이스

조원 홍혁기는 백엔드 데이터베이스

조원 이재현은 프론트엔드 백엔드

취업으로 인해 자리에 없는 조원 정성근은 프론트엔드에 힘써주셨습니다.




======= Q n A =======

이것 발표를 마치고 질문받는 시간을 갖도록하겠습니다.







